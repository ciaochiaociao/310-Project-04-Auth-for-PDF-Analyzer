import json
import os
import datatier
import auth
import api_utils

from configparser import ConfigParser

def lambda_handler(event, context):
  try:
    print("**STARTING**")
    print("**lambda: proj04_users**")

    method = event["httpMethod"]
    print("method:", method)
    
    #
    # setup AWS based on config file
    #
    config_file = 'config.ini'
    os.environ['AWS_SHARED_CREDENTIALS_FILE'] = config_file
    
    configur = ConfigParser()
    configur.read(config_file)
    
    #
    # configure for RDS access
    #
    rds_endpoint = configur.get('rds', 'endpoint')
    rds_portnum = int(configur.get('rds', 'port_number'))
    rds_username = configur.get('rds', 'user_name')
    rds_pwd = configur.get('rds', 'user_pwd')
    rds_dbname = configur.get('rds', 'db_name')

    #
    # open connection to the database
    #
    print("**Opening connection**")
    
    dbConn = datatier.get_dbConn(rds_endpoint, rds_portnum, rds_username, rds_pwd, rds_dbname)

    if method == "GET":
      #
      # now retrieve all the users
      #
      print("**Retrieving data**")
      
      sql = "SELECT * FROM users ORDER BY userid;"
      
      rows = datatier.retrieve_all_rows(dbConn, sql)
      
      for row in rows:
        print(row)

      #
      # respond in an HTTP-like way, i.e. with a status
      # code and body in JSON format
      #
      print("**DONE, returning rows**")

      return api_utils.success(200, rows)
    
    if method == "POST":
      #
      # read the username and password from the event body
      #
      print("**Accessing request body**")

      if "body" not in event:
        return api_utils.error(400, "no body in request")
      
      body = json.loads(event["body"])

      if "username" not in body or "password" not in body:
        return api_utils.error(400, "missing credentials in body")
      
      username = body["username"]
      password = body["password"]

      #
      # TODO: YOUR CODE HERE
      #
      results = datatier.retrieve_one_row(dbConn,
          "SELECT * FROM `users` WHERE `username`=%s",
          (username,))
      if len(results) != 0:
        return api_utils.error(409, "user already exists")
      else:
        pwdhash = auth.hash_password(password)
        datatier.perform_action(dbConn,
          "INSERT INTO `users` (`username`, `pwdhash`) VALUES (%s, %s)",
          (username, pwdhash))

      #
      # grab the userid that was auto-generated by mysql
      #
      sql = "SELECT LAST_INSERT_ID();"

      row = datatier.retrieve_one_row(dbConn, sql)

      userid = row[0]

      print("userid:", userid)

      #
      # respond in an HTTP-like way, i.e. with a status
      # code and body in JSON format
      #
      print("**DONE, returning...**")

      return api_utils.success(200, {'userid': userid})
    
  except Exception as err:
    print("**ERROR**")
    print(str(err))

    return api_utils.error(500, str(err))
